{"ast":null,"code":"import ProductCard from '@/components/ProductCard.vue';\nimport CheckoutProduct from './CheckoutProduct.vue';\nimport CheckoutService from '@/services/CheckoutService';\nimport CatalogService from '@/services/CatalogService';\nimport UserService from '@/services/UserService';\nimport { mapActions, mapGetters } from 'vuex';\nexport default {\n  name: 'ProductList',\n  components: {\n    ProductCard,\n    CheckoutProduct\n  },\n\n  data() {\n    return {\n      products: [],\n      showCheckout: false,\n      cart: [],\n      user: {\n        name: '',\n        email: ''\n      },\n      isModalOpen: false\n    };\n  },\n\n  async created() {\n    try {\n      // Fetch products from the CatalogService\n      this.products = await CatalogService.getProducts();\n    } catch (error) {\n      console.error('Error loading products:', error.message); // Handle error as needed\n    }\n  },\n\n  computed: { ...mapGetters('user', ['getUserDetails'])\n  },\n  methods: { ...mapActions('user', ['setUserDetails', 'clearUserDetails']),\n\n    checkout(cart) {\n      console.log(\"Checkout\", cart);\n      this.cart = [...this.cart, ...cart]; // Merge current cart items with existing cart\n\n      this.showCheckout = true;\n    },\n\n    closeModal() {\n      this.isModalOpen = false;\n    },\n\n    async placeOrder() {\n      if (this.getUserDetails) {\n        this.isModalOpen = true;\n      }\n\n      try {\n        // Call the CheckoutService to place the order\n        await CheckoutService.placeOrder(this.cart); // Clear the cart after placing the order\n\n        this.cart = [];\n        this.showCheckout = false;\n        console.log('Order placed successfully!');\n      } catch (error) {\n        console.error('Error placing the order:', error.message); // Handle error as needed\n      }\n    },\n\n    async storeUserDetails() {\n      try {\n        // Call the storeUserDetails to store the user details\n        const user = await UserService.storeUserDetails(this.user);\n        await this.setUserDetails(user); // Clear the user after storing\n\n        this.user = {};\n        console.log('Store successfully!', user);\n      } catch (error) {\n        console.error('Error storing the user details:', error.message); // Handle error as needed\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA+CE,OAAOA,WAAP,MAAwB,8BAAxB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,MAAvC;AAEA,eAAe;EACbC,IAAI,EAAE,aADO;EAEbC,UAAU,EAAE;IACVR,WADU;IAEVC;EAFU,CAFC;;EAMbQ,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EADL;MAELC,YAAY,EAAE,KAFT;MAGLC,IAAI,EAAE,EAHD;MAILC,IAAI,EAAE;QACFN,IAAI,EAAE,EADJ;QAEFO,KAAK,EAAE;MAFL,CAJD;MAQLC,WAAW,EAAE;IARR,CAAP;EAUD,CAjBY;;EAkBb,MAAMC,OAAN,GAAgB;IAChB,IAAI;MACF;MACA,KAAKN,QAAL,GAAgB,MAAMP,cAAc,CAACc,WAAf,EAAtB;IACF,CAHA,CAGE,OAAOC,KAAP,EAAc;MACdC,OAAO,CAACD,KAAR,CAAc,yBAAd,EAAyCA,KAAK,CAACE,OAA/C,EADc,CAEd;IACF;EACD,CA1Bc;;EA2BfC,QAAQ,EAAE,EACR,GAAGf,UAAU,CAAC,MAAD,EAAS,CAAC,gBAAD,CAAT;EADL,CA3BK;EA8BbgB,OAAO,EAAE,EACL,GAAGjB,UAAU,CAAC,MAAD,EAAQ,CAAC,gBAAD,EAAmB,kBAAnB,CAAR,CADR;;IAELkB,QAAQ,CAACX,IAAD,EAAO;MACXO,OAAO,CAACK,GAAR,CAAY,UAAZ,EAAwBZ,IAAxB;MACA,KAAKA,IAAL,GAAY,CAAC,GAAG,KAAKA,IAAT,EAAe,GAAGA,IAAlB,CAAZ,CAFW,CAE0B;;MACrC,KAAKD,YAAL,GAAoB,IAApB;IACH,CANI;;IAOLc,UAAU,GAAG;MACT,KAAKV,WAAL,GAAmB,KAAnB;IACH,CATI;;IAUL,MAAMW,UAAN,GAAmB;MAEf,IAAG,KAAKC,cAAR,EAAwB;QACpB,KAAKZ,WAAL,GAAmB,IAAnB;MACJ;;MAEA,IAAI;QACA;QACA,MAAMb,eAAe,CAACwB,UAAhB,CAA2B,KAAKd,IAAhC,CAAN,CAFA,CAIA;;QACA,KAAKA,IAAL,GAAY,EAAZ;QACA,KAAKD,YAAL,GAAoB,KAApB;QAEAQ,OAAO,CAACK,GAAR,CAAY,4BAAZ;MAEJ,CAVA,CAUE,OAAON,KAAP,EAAc;QACZC,OAAO,CAACD,KAAR,CAAc,0BAAd,EAA0CA,KAAK,CAACE,OAAhD,EADY,CAEZ;MACJ;IACH,CA9BI;;IA+BL,MAAMQ,gBAAN,GAAyB;MACrB,IAAI;QACA;QACD,MAAMf,IAAG,GAAI,MAAMT,WAAW,CAACwB,gBAAZ,CAA6B,KAAKf,IAAlC,CAAnB;QAEA,MAAM,KAAKgB,cAAL,CAAoBhB,IAApB,CAAN,CAJC,CAMA;;QACA,KAAKA,IAAL,GAAY,EAAZ;QAGAM,OAAO,CAACK,GAAR,CAAY,qBAAZ,EAAmCX,IAAnC;MAEJ,CAZA,CAYE,OAAOK,KAAP,EAAc;QACZC,OAAO,CAACD,KAAR,CAAc,iCAAd,EAAiDA,KAAK,CAACE,OAAvD,EADY,CAEZ;MACJ;IACH;;EAhDI;AA9BI,CAAf","names":["ProductCard","CheckoutProduct","CheckoutService","CatalogService","UserService","mapActions","mapGetters","name","components","data","products","showCheckout","cart","user","email","isModalOpen","created","getProducts","error","console","message","computed","methods","checkout","log","closeModal","placeOrder","getUserDetails","storeUserDetails","setUserDetails"],"sourceRoot":"","sources":["/app/src/products/ProductList.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n    <!-- Iterate through the list of products and display ProductCard for each -->\n    <ProductCard\n        v-for=\"product in products\"\n        :key=\"product.id\"\n        :pid=\"product.id\"\n        :title=\"product.title\"\n        :description=\"product.description\"\n        :price=\"product.price\"\n        @checkout=\"checkout\"\n    />\n    <p>{{ getUserDetails.length }}</p>\n    <!-- <div v-if=\"!showCheckout\">\n      <form @submit.prevent=\"storeUserDetails\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" v-model=\"user.name\" required />\n\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" v-model=\"user.email\" required />\n\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div> -->\n        <!-- Modal component -->\n        <div v-if=\"isModalOpen\" class=\"modal\">\n            <div class=\"modal-content\">\n                <form @submit.prevent=\"storeUserDetails\">\n                <label for=\"name\">Name:</label>\n                <input type=\"text\" id=\"name\" v-model=\"user.name\" required />\n\n                <label for=\"email\">Email:</label>\n                <input type=\"email\" id=\"email\" v-model=\"user.email\" required />\n\n                <button type=\"submit\" class=\"submit-button\">Submit</button>\n                </form>\n                <button @click=\"closeModal\" class=\"close-modal\">Close</button>\n            </div>\n        </div>\n    <CheckoutProduct v-if=\"showCheckout\" :cart=\"cart\" />\n    <button v-if=\"cart.length\" @click=\"placeOrder\" class=\"place-order-button\">\n      Place Order\n    </button>\n    </div>\n  </template>\n  \n  <script>\n  import ProductCard from '@/components/ProductCard.vue';\n  import CheckoutProduct from './CheckoutProduct.vue';\n  import CheckoutService from '@/services/CheckoutService';\n  import CatalogService from '@/services/CatalogService';\n  import UserService from '@/services/UserService';\n  import { mapActions, mapGetters } from 'vuex';\n\n  export default {\n    name: 'ProductList',\n    components: {\n      ProductCard,\n      CheckoutProduct\n    },\n    data() {\n      return {\n        products: [],\n        showCheckout: false,\n        cart: [],\n        user: {\n            name: '',\n            email: '',\n        },\n        isModalOpen: false,\n      };\n    },\n    async created() {\n    try {\n      // Fetch products from the CatalogService\n      this.products = await CatalogService.getProducts();\n    } catch (error) {\n      console.error('Error loading products:', error.message);\n      // Handle error as needed\n    }\n  },\n  computed: {\n    ...mapGetters('user', ['getUserDetails']),\n  },\n    methods: {\n        ...mapActions('user',['setUserDetails', 'clearUserDetails']),\n        checkout(cart) {\n            console.log(\"Checkout\", cart);\n            this.cart = [...this.cart, ...cart]; // Merge current cart items with existing cart\n            this.showCheckout = true;\n        },\n        closeModal() {\n            this.isModalOpen = false;\n        },\n        async placeOrder() {\n\n            if(this.getUserDetails) {\n                this.isModalOpen = true;\n            }\n\n            try {\n                // Call the CheckoutService to place the order\n                await CheckoutService.placeOrder(this.cart);\n\n                // Clear the cart after placing the order\n                this.cart = [];\n                this.showCheckout = false;\n\n                console.log('Order placed successfully!');\n\n            } catch (error) {\n                console.error('Error placing the order:', error.message);\n                // Handle error as needed\n            }\n        },\n        async storeUserDetails() {\n            try {\n                // Call the storeUserDetails to store the user details\n               const user = await UserService.storeUserDetails(this.user);\n\n               await this.setUserDetails(user);\n\n                // Clear the user after storing\n                this.user = {};\n\n\n                console.log('Store successfully!', user);\n\n            } catch (error) {\n                console.error('Error storing the user details:', error.message);\n                // Handle error as needed\n            }\n        },\n    }\n  };\n  </script>\n\n<style scoped>\n.container {\n  padding: 20px;\n  display: flex; /* Display children in a row */\n  gap: 20px; /* Add spacing between products */\n  overflow-x: auto; /* Add horizontal scroll if needed */\n  justify-content: flex-start;\n}\n\n.place-order-button {\n  margin-top: 20px;\n  padding: 10px;\n  background-color: #dc3545;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  height: 466px;\n}\n\n.place-order-button:hover {\n  background-color: #c82333;\n}\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background-color: #fff;\n  padding: 50px;\n  border-radius: 8px;\n}\nlabel,input {\n    padding: 8px;\n}\n.submit-button {\n    padding: 8px;\n    cursor: pointer;\n}\n.close-modal {\n    padding: 8px;\n    margin-top: 20px;\n}\n</style>\n  "]},"metadata":{},"sourceType":"module"}