{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-1f2d3f8a\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"modal\"\n};\nconst _hoisted_3 = {\n  class: \"modal-content\"\n};\n\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"User Details\", -1\n/* HOISTED */\n));\n\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"name\"\n}, \"Name:\", -1\n/* HOISTED */\n));\n\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"email\"\n}, \"Email:\", -1\n/* HOISTED */\n));\n\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\",\n  class: \"submit-button\"\n}, \"Submit\", -1\n/* HOISTED */\n));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ProductCard = _resolveComponent(\"ProductCard\");\n\n  const _component_CheckoutProduct = _resolveComponent(\"CheckoutProduct\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Iterate through the list of products and display ProductCard for each \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.products, product => {\n    return _openBlock(), _createBlock(_component_ProductCard, {\n      key: product.id,\n      pid: product.id,\n      name: product.name,\n      description: product.description,\n      price: product.price,\n      onCheckout: $options.checkout\n    }, null, 8\n    /* PROPS */\n    , [\"pid\", \"name\", \"description\", \"price\", \"onCheckout\"]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  )), _createCommentVNode(\" Modal component \"), $data.isModalOpen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.storeUserDetails && $options.storeUserDetails(...args), [\"prevent\"]))\n  }, [_hoisted_5, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"name\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.user.name = $event),\n    required: \"\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.user.name]]), _hoisted_6, _withDirectives(_createElementVNode(\"input\", {\n    type: \"email\",\n    id: \"email\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.user.email = $event),\n    required: \"\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.user.email]]), _hoisted_7], 32\n  /* HYDRATE_EVENTS */\n  ), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.closeModal && $options.closeModal(...args)),\n    class: \"close-modal\"\n  }, \"Close\")])])) : _createCommentVNode(\"v-if\", true), $data.showCheckout ? (_openBlock(), _createBlock(_component_CheckoutProduct, {\n    key: 1,\n    cart: $data.cart\n  }, null, 8\n  /* PROPS */\n  , [\"cart\"])) : _createCommentVNode(\"v-if\", true), $data.cart.length ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 2,\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.placeOrder && $options.placeOrder(...args)),\n    class: \"place-order-button\"\n  }, \" Place Order \")) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;;;;EACSA,KAAK,EAAC;;;;EAYiBA,KAAK,EAAC;;;EACrBA,KAAK,EAAC;;;gEACPC,oBAAqB,IAArB,EAAqB,IAArB,EAAI,cAAJ,EAAgB;AAAA;AAAhB;;gEAEAA,oBAA+B,OAA/B,EAA+B;EAAxBC,GAAG,EAAC;AAAoB,CAA/B,EAAkB,OAAlB,EAAuB;AAAA;AAAvB;;gEAGAD,oBAAiC,OAAjC,EAAiC;EAA1BC,GAAG,EAAC;AAAsB,CAAjC,EAAmB,QAAnB,EAAyB;AAAA;AAAzB;;gEAGAD,oBAA2D,QAA3D,EAA2D;EAAnDE,IAAI,EAAC,QAA8C;EAArCH,KAAK,EAAC;AAA+B,CAA3D,EAA4C,QAA5C,EAAkD;AAAA;AAAlD;;;;;;;uBAtBZI,oBA+BM,KA/BN,cA+BM,CA9BNC,8FA8BM,qBA7BND,oBAQEE,SARF,EAQE,IARF,EAQEC,YAPoBC,cAOpB,EAPSC,OAAmB,IAAZ;yBADlBC,aAQEC,sBARF,EAQE;MANGC,GAAG,EAAEH,OAAO,CAACI,EAMhB;MALGC,GAAG,EAAEL,OAAO,CAACI,EAKhB;MAJGE,IAAI,EAAEN,OAAO,CAACM,IAIjB;MAHGC,WAAW,EAAEP,OAAO,CAACO,WAGxB;MAFGC,KAAK,EAAER,OAAO,CAACQ,KAElB;MADGC,UAAQ,EAAEC;IACb,CARF;;IAAA;GAQE,CARF;;EAAA,CA6BM,GApBFd,wCAoBE,EAnBSG,mCAAXJ,oBAcM,KAdN,cAcM,CAbFH,oBAYM,KAZN,cAYM,CAXFmB,UAWE,EAVFnB,oBAQO,MARP,EAQO;IARAoB,QAAM,wDAAUF,+DAAV,EAA0B,WAA1B;EAQN,CARP,GACAG,4BACArB,oBAA4D,OAA5D,EAA4D;IAArDE,IAAI,EAAC,MAAgD;IAAzCU,EAAE,EAAC,MAAsC;+DAAtBL,WAAKO,OAAIQ,OAAa;IAAXC,QAAQ,EAAR;EAAW,CAA5D;;EAAA,kBAAsChB,WAAKO,SAE3CU,4BACAxB,oBAA+D,OAA/D,EAA+D;IAAxDE,IAAI,EAAC,OAAmD;IAA3CU,EAAE,EAAC,OAAwC;+DAAvBL,WAAKkB,QAAKH,OAAa;IAAXC,QAAQ,EAAR;EAAW,CAA/D;;EAAA,kBAAwChB,WAAKkB,UAE7CC,WAPA;;EAAA,CAUE,EADF1B,oBAA8D,QAA9D,EAA8D;IAArD2B,OAAK,yCAAET,mDAAF,CAAgD;IAAlCnB,KAAK,EAAC;EAA4B,CAA9D,EAAgD,OAAhD,CACE,CAZN,CAaE,CAdN,sCAmBE,EAJiBQ,oCAAvBE,aAAoDmB,0BAApD,EAAoD;UAAA;IAAdC,IAAI,EAAEtB;EAAQ,CAApD;;EAAA,gDAIM,EAHQA,WAAKuB,wBAAnB3B,oBAES,QAFT,EAES;UAAA;IAFmBwB,OAAK,yCAAET,mDAAF,CAExB;IAFsCnB,KAAK,EAAC;EAE5C,CAFT,EAA0E,eAA1E,sCAGM,CA/BN","names":["class","_createElementVNode","for","type","_createElementBlock","_createCommentVNode","_Fragment","_renderList","$data","product","_createBlock","_component_ProductCard","key","id","pid","name","description","price","onCheckout","$options","_hoisted_4","onSubmit","_hoisted_5","$event","required","_hoisted_6","email","_hoisted_7","onClick","_component_CheckoutProduct","cart","length"],"sourceRoot":"","sources":["/app/src/products/ProductList.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n    <!-- Iterate through the list of products and display ProductCard for each -->\n    <ProductCard\n        v-for=\"product in products\"\n        :key=\"product.id\"\n        :pid=\"product.id\"\n        :name=\"product.name\"\n        :description=\"product.description\"\n        :price=\"product.price\"\n        @checkout=\"checkout\"\n    />\n        <!-- Modal component -->\n        <div v-if=\"isModalOpen\" class=\"modal\">\n            <div class=\"modal-content\">\n                <h2>User Details</h2>\n                <form @submit.prevent=\"storeUserDetails\">\n                <label for=\"name\">Name:</label>\n                <input type=\"text\" id=\"name\" v-model=\"user.name\" required />\n\n                <label for=\"email\">Email:</label>\n                <input type=\"email\" id=\"email\" v-model=\"user.email\" required />\n\n                <button type=\"submit\" class=\"submit-button\">Submit</button>\n                </form>\n                <button @click=\"closeModal\" class=\"close-modal\">Close</button>\n            </div>\n        </div>\n    <CheckoutProduct v-if=\"showCheckout\" :cart=\"cart\" />\n    <button v-if=\"cart.length\" @click=\"placeOrder\" class=\"place-order-button\">\n      Place Order\n    </button>\n    </div>\n  </template>\n  \n  <script>\n  import ProductCard from '@/components/ProductCard.vue';\n  import CheckoutProduct from './CheckoutProduct.vue';\n  import CheckoutService from '@/services/CheckoutService';\n  import CatalogService from '@/services/CatalogService';\n  import UserService from '@/services/UserService';\n  import { mapActions, mapGetters } from 'vuex';\n\n  export default {\n    name: 'ProductList',\n    components: {\n      ProductCard,\n      CheckoutProduct\n    },\n    data() {\n      return {\n        products: [],\n        showCheckout: false,\n        cart: [],\n        user: {\n            name: '',\n            email: '',\n        },\n        isModalOpen: false,\n      };\n    },\n    async created() {\n    try {\n      // Fetch products from the CatalogService\n      this.products = await CatalogService.getProducts();\n\n    } catch (error) {\n      console.error('Error loading products:', error.message);\n      // Handle error as needed\n    }\n  },\n  computed: {\n    ...mapGetters('user', ['getUserDetails']),\n  },\n    methods: {\n        ...mapActions('user',['setUserDetails', 'clearUserDetails']),\n        checkout(cart) {\n            console.log(\"Checkout\", cart);\n            this.cart = [...this.cart, ...cart]; // Merge current cart items with existing cart\n            this.showCheckout = true;\n        },\n        closeModal() {\n            this.isModalOpen = false;\n        },\n        async placeOrder() {\n\n            if(this.getUserDetails.data.id) {\n               \n            try {\n                // Call the CheckoutService to place the order\n                const order = await CheckoutService.placeOrder(this.cart, this.getUserDetails.data.id);\n\n                // Clear the cart after placing the order\n                this.cart = [];\n                this.showCheckout = false;\n\n                this.emailOrderDetails(order, this.getUserDetails.data.id);\n\n                this.$toastr.success(`Order placed successfully!`);\n\n            } catch (error) {\n                console.error('Error placing the order:', error.message);\n                this.$toastr.error(`Error placing the order:`, error.message);\n                // Handle error as needed\n            }\n          } else {\n\n            this.isModalOpen = true;\n            return;\n\n          }\n        },\n        async storeUserDetails() {\n            try {\n                // Create FormData\n                const formData = new FormData();\n                formData.append('name', this.user.name);\n                formData.append('email', this.user.email);\n                formData.append('password', 'password'); // temporary\n\n                // Call the storeUserDetails to store the user details\n                const user = await UserService.storeUserDetails(formData);\n\n                // Dispatch the setUserDetails action to save user details in Vuex\n                await this.$store.dispatch('user/setUserDetails', user);\n\n                // Clear the user after storing\n                this.user = {};\n\n                // Close the modal\n                this.isModalOpen = false;\n\n                this.$toastr.success(`User store successfully!`);\n\n            } catch (error) {\n                console.error('Error storing the user details:', error.message);\n                this.$toastr.error('Error storing the user details:', error.message);\n\n            }\n        },\n\n\n        async emailOrderDetails(order, userId) {\n            try {\n                // Call the storeUserDetails to store the user details\n               const email = await UserService.emailOrderDetails(order, userId);\n\n               this.$toastr.success('Summary orders email sent successfuly!');\n\n\n            } catch (error) {\n                console.error('Error sending the order summary:', error.message);\n                this.$toastr.error('Error sending the order summary:', error.message);\n                // Handle error as needed\n            }\n        },\n    }\n  };\n  </script>\n\n<style scoped>\n.container {\n  padding: 20px;\n  display: flex; /* Display children in a row */\n  gap: 20px; /* Add spacing between products */\n  overflow-x: auto; /* Add horizontal scroll if needed */\n  justify-content: flex-start;\n}\n\n.place-order-button {\n  margin-top: 20px;\n  padding: 10px;\n  background-color: #dc3545;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  height: 466px;\n}\n\n.place-order-button:hover {\n  background-color: #c82333;\n}\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background-color: #fff;\n  padding: 50px;\n  border-radius: 8px;\n}\nlabel,input {\n    padding: 8px;\n}\n.submit-button {\n    padding: 8px;\n    cursor: pointer;\n}\n.close-modal {\n    padding: 8px;\n    margin-top: 30px;\n}\n</style>\n  "]},"metadata":{},"sourceType":"module"}