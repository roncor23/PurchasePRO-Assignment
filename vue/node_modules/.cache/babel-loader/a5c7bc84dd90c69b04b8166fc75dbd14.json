{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport deepmerge from 'deepmerge';\n/**\r\n * Created by championswimmer on 22/07/17.\r\n */\n\nlet MockStorage; // @ts-ignore\n\n{\n  MockStorage = class {\n    get length() {\n      return Object.keys(this).length;\n    }\n\n    key(index) {\n      return Object.keys(this)[index];\n    }\n\n    setItem(key, data) {\n      this[key] = data.toString();\n    }\n\n    getItem(key) {\n      return this[key];\n    }\n\n    removeItem(key) {\n      delete this[key];\n    }\n\n    clear() {\n      for (let key of Object.keys(this)) {\n        delete this[key];\n      }\n    }\n\n  };\n} // tslint:disable: variable-name\n\nclass SimplePromiseQueue {\n  constructor() {\n    this._queue = [];\n    this._flushing = false;\n  }\n\n  enqueue(promise) {\n    this._queue.push(promise);\n\n    if (!this._flushing) {\n      return this.flushQueue();\n    }\n\n    return Promise.resolve();\n  }\n\n  flushQueue() {\n    this._flushing = true;\n\n    const chain = () => {\n      const nextTask = this._queue.shift();\n\n      if (nextTask) {\n        return nextTask.then(chain);\n      } else {\n        this._flushing = false;\n      }\n    };\n\n    return Promise.resolve(chain());\n  }\n\n}\n\nconst options = {\n  replaceArrays: {\n    arrayMerge: (destinationArray, sourceArray, options) => sourceArray\n  },\n  concatArrays: {\n    arrayMerge: (target, source, options) => target.concat(...source)\n  }\n};\n\nfunction merge(into, from, mergeOption) {\n  return deepmerge(into, from, options[mergeOption]);\n}\n\nlet FlattedJSON = JSON;\n/**\r\n * A class that implements the vuex persistence.\r\n * @type S type of the 'state' inside the store (default: any)\r\n */\n\nclass VuexPersistence {\n  /**\r\n   * Create a {@link VuexPersistence} object.\r\n   * Use the <code>plugin</code> function of this class as a\r\n   * Vuex plugin.\r\n   * @param {PersistOptions} options\r\n   */\n  constructor(options) {\n    // tslint:disable-next-line:variable-name\n    this._mutex = new SimplePromiseQueue();\n    /**\r\n     * Creates a subscriber on the store. automatically is used\r\n     * when this is used a vuex plugin. Not for manual usage.\r\n     * @param store\r\n     */\n\n    this.subscriber = store => handler => store.subscribe(handler);\n\n    if (typeof options === 'undefined') options = {};\n    this.key = options.key != null ? options.key : 'vuex';\n    this.subscribed = false;\n    this.supportCircular = options.supportCircular || false;\n\n    if (this.supportCircular) {\n      FlattedJSON = require('flatted');\n    }\n\n    this.mergeOption = options.mergeOption || 'replaceArrays';\n    let localStorageLitmus = true;\n\n    try {\n      window.localStorage.getItem('');\n    } catch (err) {\n      localStorageLitmus = false;\n    }\n    /**\r\n     * 1. First, prefer storage sent in optinos\r\n     * 2. Otherwise, use window.localStorage if available\r\n     * 3. Finally, try to use MockStorage\r\n     * 4. None of above? Well we gotta fail.\r\n     */\n\n\n    if (options.storage) {\n      this.storage = options.storage;\n    } else if (localStorageLitmus) {\n      this.storage = window.localStorage;\n    } else if (MockStorage) {\n      this.storage = new MockStorage();\n    } else {\n      throw new Error(\"Neither 'window' is defined, nor 'MockStorage' is available\");\n    }\n    /**\r\n     * How this works is -\r\n     *  1. If there is options.reducer function, we use that, if not;\r\n     *  2. We check options.modules;\r\n     *    1. If there is no options.modules array, we use entire state in reducer\r\n     *    2. Otherwise, we create a reducer that merges all those state modules that are\r\n     *        defined in the options.modules[] array\r\n     * @type {((state: S) => {}) | ((state: S) => S) | ((state: any) => {})}\r\n     */\n\n\n    this.reducer = options.reducer != null ? options.reducer : options.modules == null ? state => state : state => options.modules.reduce((a, i) => merge(a, {\n      [i]: state[i]\n    }, this.mergeOption), {\n      /* start empty accumulator*/\n    });\n\n    this.filter = options.filter || (mutation => true);\n\n    this.strictMode = options.strictMode || false;\n\n    this.RESTORE_MUTATION = function RESTORE_MUTATION(state, savedState) {\n      const mergedState = merge(state, savedState || {}, this.mergeOption);\n\n      for (const propertyName of Object.keys(mergedState)) {\n        this._vm.$set(state, propertyName, mergedState[propertyName]);\n      }\n    };\n\n    this.asyncStorage = options.asyncStorage || false;\n\n    if (this.asyncStorage) {\n      /**\r\n       * Async {@link #VuexPersistence.restoreState} implementation\r\n       * @type {((key: string, storage?: Storage) =>\r\n       *      (Promise<S> | S)) | ((key: string, storage: AsyncStorage) => Promise<any>)}\r\n       */\n      this.restoreState = options.restoreState != null ? options.restoreState : (key, storage) => storage.getItem(key).then(value => typeof value === 'string' // If string, parse, or else, just return\n      ? this.supportCircular ? FlattedJSON.parse(value || '{}') : JSON.parse(value || '{}') : value || {});\n      /**\r\n       * Async {@link #VuexPersistence.saveState} implementation\r\n       * @type {((key: string, state: {}, storage?: Storage) =>\r\n       *    (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\r\n       */\n\n      this.saveState = options.saveState != null ? options.saveState : (key, state, storage) => storage.setItem(key, // Second argument is state _object_ if asyc storage, stringified otherwise\n      // do not stringify the state if the storage type is async\n      this.asyncStorage ? merge({}, state || {}, this.mergeOption) : this.supportCircular ? FlattedJSON.stringify(state) : JSON.stringify(state));\n      /**\r\n       * Async version of plugin\r\n       * @param {Store<S>} store\r\n       */\n\n      this.plugin = store => {\n        /**\r\n         * For async stores, we're capturing the Promise returned\r\n         * by the `restoreState()` function in a `restored` property\r\n         * on the store itself. This would allow app developers to\r\n         * determine when and if the store's state has indeed been\r\n         * refreshed. This approach was suggested by GitHub user @hotdogee.\r\n         * See https://github.com/championswimmer/vuex-persist/pull/118#issuecomment-500914963\r\n         * @since 2.1.0\r\n         */\n        store.restored = this.restoreState(this.key, this.storage).then(savedState => {\n          /**\r\n           * If in strict mode, do only via mutation\r\n           */\n          if (this.strictMode) {\n            store.commit('RESTORE_MUTATION', savedState);\n          } else {\n            store.replaceState(merge(store.state, savedState || {}, this.mergeOption));\n          }\n\n          this.subscriber(store)((mutation, state) => {\n            if (this.filter(mutation)) {\n              this._mutex.enqueue(this.saveState(this.key, this.reducer(state), this.storage));\n            }\n          });\n          this.subscribed = true;\n        });\n      };\n    } else {\n      /**\r\n       * Sync {@link #VuexPersistence.restoreState} implementation\r\n       * @type {((key: string, storage?: Storage) =>\r\n       *    (Promise<S> | S)) | ((key: string, storage: Storage) => (any | string | {}))}\r\n       */\n      this.restoreState = options.restoreState != null ? options.restoreState : (key, storage) => {\n        const value = storage.getItem(key);\n\n        if (typeof value === 'string') {\n          // If string, parse, or else, just return\n          return this.supportCircular ? FlattedJSON.parse(value || '{}') : JSON.parse(value || '{}');\n        } else {\n          return value || {};\n        }\n      };\n      /**\r\n       * Sync {@link #VuexPersistence.saveState} implementation\r\n       * @type {((key: string, state: {}, storage?: Storage) =>\r\n       *     (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\r\n       */\n\n      this.saveState = options.saveState != null ? options.saveState : (key, state, storage) => storage.setItem(key, // Second argument is state _object_ if localforage, stringified otherwise\n      this.supportCircular ? FlattedJSON.stringify(state) : JSON.stringify(state));\n      /**\r\n       * Sync version of plugin\r\n       * @param {Store<S>} store\r\n       */\n\n      this.plugin = store => {\n        const savedState = this.restoreState(this.key, this.storage);\n\n        if (this.strictMode) {\n          store.commit('RESTORE_MUTATION', savedState);\n        } else {\n          store.replaceState(merge(store.state, savedState || {}, this.mergeOption));\n        }\n\n        this.subscriber(store)((mutation, state) => {\n          if (this.filter(mutation)) {\n            this.saveState(this.key, this.reducer(state), this.storage);\n          }\n        });\n        this.subscribed = true;\n      };\n    }\n  }\n\n}\n\nexport default VuexPersistence;\nexport { MockStorage, VuexPersistence };","map":{"version":3,"mappings":"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","names":["MockStorage","length","Object","keys","key","index","setItem","data","toString","getItem","removeItem","clear","SimplePromiseQueue","constructor","enqueue","promise","_queue","push","_flushing","flushQueue","Promise","resolve","chain","nextTask","shift","then","options","replaceArrays","arrayMerge","destinationArray","sourceArray","concatArrays","target","source","concat","merge","into","from","mergeOption","deepmerge","FlattedJSON","JSON","VuexPersistence","store","handler","subscribe","subscribed","supportCircular","require","localStorageLitmus","window","localStorage","err","storage","Error","reducer","modules","state","reduce","a","i","filter","mutation","strictMode","RESTORE_MUTATION","savedState","mergedState","propertyName","_vm","$set","asyncStorage","restoreState","value","parse","saveState","stringify","plugin","restored","commit","replaceState","subscriber","_mutex"],"sources":["../../src/MockStorage.ts","../../src/SimplePromiseQueue.ts","../../src/utils.ts","../../src/index.ts"],"sourcesContent":["/**\n * Created by championswimmer on 22/07/17.\n */\nlet MockStorage: typeof Storage | undefined\n\n// @ts-ignore\nif (process.env.MODULE_FORMAT !== 'umd') {\n  MockStorage = class implements Storage {\n    [index: number]: string;\n    [key: string]: any;\n\n    public get length(): number {\n      return Object.keys(this).length\n    }\n\n    public key(index: number): string | any {\n      return Object.keys(this)[index]\n    }\n\n    public setItem(key: string, data: any): void {\n      this[key] = data.toString()\n    }\n    public getItem(key: string): string {\n      return this[key]\n    }\n    public removeItem(key: string): void {\n      delete this[key]\n    }\n    public clear(): void {\n      for (let key of Object.keys(this)) {\n        delete this[key]\n      }\n    }\n  }\n}\n\nexport { MockStorage }\n","// tslint:disable: variable-name\nexport default class SimplePromiseQueue {\n  private readonly _queue: Array<Promise<void>> = []\n  private _flushing = false\n\n  public enqueue(promise: Promise<void>) {\n    this._queue.push(promise)\n    if (!this._flushing) { return this.flushQueue() }\n    return Promise.resolve()\n  }\n\n  private flushQueue() {\n    this._flushing = true\n\n    const chain = (): Promise<void> | void => {\n      const nextTask = this._queue.shift()\n      if (nextTask) {\n        return nextTask.then(chain)\n      } else {\n        this._flushing = false\n      }\n    }\n    return Promise.resolve(chain())\n  }\n}\n","import deepmerge from 'deepmerge'\n\nexport type MergeOptionType = 'replaceArrays' | 'concatArrays'\n\nconst options: {[k in MergeOptionType]: deepmerge.Options} = {\n  replaceArrays: {\n    arrayMerge: (destinationArray, sourceArray, options) => sourceArray\n  },\n  concatArrays: {\n    arrayMerge: (target, source, options) => target.concat(...source)\n  }\n}\n\nconst defaultMergeOptions: deepmerge.Options = {\n  // replacing arrays\n  \n}\n\nexport function merge<I, F>(into: Partial<I>, from: Partial<F>, mergeOption: MergeOptionType): I & F & {} {\n  return deepmerge(into, from, options[mergeOption])\n}\n","/**\n * Created by championswimmer on 18/07/17.\n */\nimport { Mutation, MutationPayload, Payload, Plugin, Store } from 'vuex'\nimport { AsyncStorage } from './AsyncStorage'\nimport { MockStorage } from './MockStorage'\nimport { PersistOptions } from './PersistOptions'\nimport SimplePromiseQueue from './SimplePromiseQueue'\nimport { merge, MergeOptionType } from './utils'\n\nlet FlattedJSON = JSON\n\n/**\n * A class that implements the vuex persistence.\n * @type S type of the 'state' inside the store (default: any)\n */\nexport class VuexPersistence<S> implements PersistOptions<S> {\n  public asyncStorage: boolean\n  public storage: Storage | AsyncStorage | undefined\n  public restoreState: (key: string, storage?: AsyncStorage | Storage) => Promise<S> | S\n  public saveState: (key: string, state: {}, storage?: AsyncStorage | Storage) => Promise<void> | void\n  public reducer: (state: S) => Partial<S>\n  public key: string\n  public filter: (mutation: Payload) => boolean\n  public modules: string[]\n  public strictMode: boolean\n  public supportCircular: boolean\n  public mergeOption: MergeOptionType\n\n  /**\n   * The plugin function that can be used inside a vuex store.\n   */\n  public plugin: Plugin<S>\n  /**\n   * A mutation that can be used to restore state\n   * Helpful if we are running in strict mode\n   */\n  public RESTORE_MUTATION: Mutation<S>\n  public subscribed: boolean\n\n  // tslint:disable-next-line:variable-name\n  private _mutex = new SimplePromiseQueue()\n\n  /**\n   * Create a {@link VuexPersistence} object.\n   * Use the <code>plugin</code> function of this class as a\n   * Vuex plugin.\n   * @param {PersistOptions} options\n   */\n  public constructor(options?: PersistOptions<S>) {\n    if (typeof options === 'undefined') options = {} as PersistOptions<S>\n    this.key = ((options.key != null) ? options.key : 'vuex')\n\n    this.subscribed = false\n    this.supportCircular = options.supportCircular || false\n    if (this.supportCircular) {\n      FlattedJSON = require('flatted')\n    }\n    this.mergeOption = options.mergeOption || 'replaceArrays'\n\n    let localStorageLitmus = true\n\n    try {\n      window.localStorage.getItem('')\n    } catch (err) {\n      localStorageLitmus = false\n    }\n\n    /**\n     * 1. First, prefer storage sent in optinos\n     * 2. Otherwise, use window.localStorage if available\n     * 3. Finally, try to use MockStorage\n     * 4. None of above? Well we gotta fail.\n     */\n    if (options.storage) { this.storage = options.storage }\n    else if (localStorageLitmus) { this.storage = window.localStorage }\n    else if (MockStorage) { this.storage = new MockStorage() }\n    else { throw new Error(\"Neither 'window' is defined, nor 'MockStorage' is available\") }\n\n    /**\n     * How this works is -\n     *  1. If there is options.reducer function, we use that, if not;\n     *  2. We check options.modules;\n     *    1. If there is no options.modules array, we use entire state in reducer\n     *    2. Otherwise, we create a reducer that merges all those state modules that are\n     *        defined in the options.modules[] array\n     * @type {((state: S) => {}) | ((state: S) => S) | ((state: any) => {})}\n     */\n    this.reducer = (\n      (options.reducer != null)\n        ? options.reducer\n        : (\n          (options.modules == null)\n            ? ((state: S) => state)\n            : (\n              (state: any) =>\n                (options!.modules as string[]).reduce((a, i) =>\n                  merge(a, { [i]: state[i] }, this.mergeOption), {/* start empty accumulator*/ })\n            )\n        )\n    )\n\n    this.filter = options.filter || ((mutation) => true)\n\n    this.strictMode = options.strictMode || false\n\n    this.RESTORE_MUTATION = function RESTORE_MUTATION(state: S, savedState: any) {\n      const mergedState = merge(state, savedState || {}, this.mergeOption)\n      for (const propertyName of Object.keys(mergedState as {})) {\n        (this as any)._vm.$set(state, propertyName, (mergedState as any)[propertyName])\n      }\n    }\n\n    this.asyncStorage = options.asyncStorage || false\n\n    if (this.asyncStorage) {\n\n      /**\n       * Async {@link #VuexPersistence.restoreState} implementation\n       * @type {((key: string, storage?: Storage) =>\n       *      (Promise<S> | S)) | ((key: string, storage: AsyncStorage) => Promise<any>)}\n       */\n      this.restoreState = (\n        (options.restoreState != null)\n          ? options.restoreState\n          : ((key: string, storage: AsyncStorage) =>\n            (storage).getItem(key)\n              .then((value) =>\n                typeof value === 'string' // If string, parse, or else, just return\n                  ? (\n                    this.supportCircular\n                      ? FlattedJSON.parse(value || '{}')\n                      : JSON.parse(value || '{}')\n                  )\n                  : (value || {})\n              )\n          )\n      )\n\n      /**\n       * Async {@link #VuexPersistence.saveState} implementation\n       * @type {((key: string, state: {}, storage?: Storage) =>\n       *    (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\n       */\n      this.saveState = (\n        (options.saveState != null)\n          ? options.saveState\n          : ((key: string, state: {}, storage: AsyncStorage) =>\n            (storage).setItem(\n              key, // Second argument is state _object_ if asyc storage, stringified otherwise\n              // do not stringify the state if the storage type is async\n              (this.asyncStorage\n                ? merge({}, state || {}, this.mergeOption)\n                : (\n                  this.supportCircular\n                    ? FlattedJSON.stringify(state) as any\n                    : JSON.stringify(state) as any\n                )\n              )\n            )\n          )\n      )\n\n      /**\n       * Async version of plugin\n       * @param {Store<S>} store\n       */\n      this.plugin = (store: Store<S>) => {\n        /**\n         * For async stores, we're capturing the Promise returned\n         * by the `restoreState()` function in a `restored` property\n         * on the store itself. This would allow app developers to\n         * determine when and if the store's state has indeed been\n         * refreshed. This approach was suggested by GitHub user @hotdogee.\n         * See https://github.com/championswimmer/vuex-persist/pull/118#issuecomment-500914963\n         * @since 2.1.0\n         */\n        (store as any).restored = ((this.restoreState(this.key, this.storage)) as Promise<S>).then((savedState) => {\n          /**\n           * If in strict mode, do only via mutation\n           */\n          if (this.strictMode) {\n            store.commit('RESTORE_MUTATION', savedState)\n          } else {\n            store.replaceState(merge(store.state, savedState || {}, this.mergeOption) as S)\n          }\n          this.subscriber(store)((mutation: MutationPayload, state: S) => {\n            if (this.filter(mutation)) {\n              this._mutex.enqueue(\n                this.saveState(this.key, this.reducer(state), this.storage) as Promise<void>\n              )\n            }\n          })\n          this.subscribed = true\n        })\n      }\n    } else {\n\n      /**\n       * Sync {@link #VuexPersistence.restoreState} implementation\n       * @type {((key: string, storage?: Storage) =>\n       *    (Promise<S> | S)) | ((key: string, storage: Storage) => (any | string | {}))}\n       */\n      this.restoreState = (\n        (options.restoreState != null)\n          ? options.restoreState\n          : ((key: string, storage: Storage) => {\n            const value = (storage).getItem(key)\n            if (typeof value === 'string') {// If string, parse, or else, just return\n              return (\n                this.supportCircular\n                  ? FlattedJSON.parse(value || '{}')\n                  : JSON.parse(value || '{}')\n              )\n            } else {\n              return (value || {})\n            }\n          })\n      )\n\n      /**\n       * Sync {@link #VuexPersistence.saveState} implementation\n       * @type {((key: string, state: {}, storage?: Storage) =>\n       *     (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\n       */\n      this.saveState = (\n        (options.saveState != null)\n          ? options.saveState\n          : ((key: string, state: {}, storage: Storage) =>\n            (storage).setItem(\n              key, // Second argument is state _object_ if localforage, stringified otherwise\n              (\n                this.supportCircular\n                  ? FlattedJSON.stringify(state) as any\n                  : JSON.stringify(state) as any\n              )\n            )\n          )\n      )\n\n      /**\n       * Sync version of plugin\n       * @param {Store<S>} store\n       */\n      this.plugin = (store: Store<S>) => {\n        const savedState = this.restoreState(this.key, this.storage) as S\n\n        if (this.strictMode) {\n          store.commit('RESTORE_MUTATION', savedState)\n        } else {\n          store.replaceState(merge(store.state, savedState || {}, this.mergeOption) as S)\n        }\n\n        this.subscriber(store)((mutation: MutationPayload, state: S) => {\n          if (this.filter(mutation)) {\n            this.saveState(this.key, this.reducer(state), this.storage)\n          }\n        })\n\n        this.subscribed = true\n      }\n    }\n  }\n\n  /**\n   * Creates a subscriber on the store. automatically is used\n   * when this is used a vuex plugin. Not for manual usage.\n   * @param store\n   */\n  private subscriber = (store: Store<S>) =>\n    (handler: (mutation: MutationPayload, state: S) => any) => store.subscribe(handler)\n}\n\nexport {\n  MockStorage, AsyncStorage, PersistOptions\n}\n\nexport default VuexPersistence\n"]},"metadata":{},"sourceType":"module"}