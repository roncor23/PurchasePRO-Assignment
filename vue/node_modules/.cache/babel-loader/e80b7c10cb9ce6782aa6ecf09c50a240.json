{"ast":null,"code":"import UserModal from '@/components/UserModal.vue';\nimport ProductCard from '@/components/ProductCard.vue';\nimport CheckoutProduct from './CheckoutProduct.vue';\nimport CheckoutService from '@/services/CheckoutService';\nimport CatalogService from '@/services/CatalogService';\nimport UserService from '@/services/UserService';\nimport { mapActions, mapGetters } from 'vuex';\nexport default {\n  name: 'ProductList',\n  components: {\n    ProductCard,\n    CheckoutProduct,\n    UserModal\n  },\n\n  data() {\n    return {\n      products: [],\n      showCheckout: false,\n      cart: [],\n      isModalOpen: false\n    };\n  },\n\n  async created() {\n    try {\n      // Fetch products from the CatalogService\n      this.products = await CatalogService.getProducts();\n    } catch (error) {\n      console.error(`${error.message}`); // Handle error as needed\n    }\n  },\n\n  computed: { ...mapGetters('user', ['getUserDetails'])\n  },\n  methods: { ...mapActions('user', ['setUserDetails', 'clearUserDetails']),\n\n    checkout(cart) {\n      console.log(\"Checkout\", cart);\n      this.cart = [...this.cart, ...cart]; // Merge current cart items with existing cart\n\n      this.showCheckout = true;\n    },\n\n    closeModal() {\n      this.isModalOpen = false;\n    },\n\n    async placeOrder() {\n      if (this.getUserDetails.data.id) {\n        try {\n          // Call the CheckoutService to place the order\n          const order = await CheckoutService.placeOrder(this.cart, this.getUserDetails.data.id); // Clear the cart after placing the order\n\n          this.cart = [];\n          this.showCheckout = false;\n          this.emailOrderDetails(order, this.getUserDetails.data.id);\n          this.$toastr.success(`Order placed successfully!`);\n        } catch (error) {\n          console.error('Error placing the order:', error.message);\n          this.$toastr.error(`${error.message}`); // Handle error as needed\n        }\n      } else {\n        this.isModalOpen = true;\n        return;\n      }\n    },\n\n    async storeUserDetails() {\n      try {\n        // Create FormData\n        const formData = new FormData();\n        formData.append('name', this.user.name);\n        formData.append('email', this.user.email);\n        formData.append('password', 'password'); // temporary\n        // Call the storeUserDetails to store the user details\n\n        const user = await UserService.storeUserDetails(formData); // Dispatch the setUserDetails action to save user details in Vuex\n\n        await this.$store.dispatch('user/setUserDetails', user); // Clear the user after storing\n\n        this.user = {}; // Close the modal\n\n        this.isModalOpen = false;\n        this.$toastr.success(`User store successfully!`);\n      } catch (error) {\n        console.error('Error storing the user details:', error.message);\n        this.$toastr.error(`${error.message}`);\n      }\n    },\n\n    async emailOrderDetails(order, userId) {\n      try {\n        // Call the storeUserDetails to store the user details\n        const email = await UserService.emailOrderDetails(order, userId);\n        this.$toastr.success(`${email.message}`);\n      } catch (error) {\n        this.$toastr.error(`${error.message}`); // Handle error as needed\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA6BE,OAAOA,SAAP,MAAsB,4BAAtB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,MAAvC;AAEA,eAAe;EACbC,IAAI,EAAE,aADO;EAEbC,UAAU,EAAE;IACVR,WADU;IAEVC,eAFU;IAGVF;EAHU,CAFC;;EAObU,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EADL;MAELC,YAAY,EAAE,KAFT;MAGLC,IAAI,EAAE,EAHD;MAILC,WAAW,EAAE;IAJR,CAAP;EAMD,CAdY;;EAeb,MAAMC,OAAN,GAAgB;IAChB,IAAI;MACF;MACA,KAAKJ,QAAL,GAAgB,MAAMP,cAAc,CAACY,WAAf,EAAtB;IAEF,CAJA,CAIE,OAAOC,KAAP,EAAc;MACdC,OAAO,CAACD,KAAR,CAAe,GAAEA,KAAK,CAACE,OAAQ,EAA/B,EADc,CAEd;IACF;EACD,CAxBc;;EAyBfC,QAAQ,EAAE,EACR,GAAGb,UAAU,CAAC,MAAD,EAAS,CAAC,gBAAD,CAAT;EADL,CAzBK;EA4Bbc,OAAO,EAAE,EACL,GAAGf,UAAU,CAAC,MAAD,EAAQ,CAAC,gBAAD,EAAmB,kBAAnB,CAAR,CADR;;IAELgB,QAAQ,CAACT,IAAD,EAAO;MACXK,OAAO,CAACK,GAAR,CAAY,UAAZ,EAAwBV,IAAxB;MACA,KAAKA,IAAL,GAAY,CAAC,GAAG,KAAKA,IAAT,EAAe,GAAGA,IAAlB,CAAZ,CAFW,CAE0B;;MACrC,KAAKD,YAAL,GAAoB,IAApB;IACH,CANI;;IAOLY,UAAU,GAAG;MACT,KAAKV,WAAL,GAAmB,KAAnB;IACH,CATI;;IAUL,MAAMW,UAAN,GAAmB;MAEf,IAAG,KAAKC,cAAL,CAAoBhB,IAApB,CAAyBiB,EAA5B,EAAgC;QAEhC,IAAI;UACA;UACA,MAAMC,KAAI,GAAI,MAAMzB,eAAe,CAACsB,UAAhB,CAA2B,KAAKZ,IAAhC,EAAsC,KAAKa,cAAL,CAAoBhB,IAApB,CAAyBiB,EAA/D,CAApB,CAFA,CAIA;;UACA,KAAKd,IAAL,GAAY,EAAZ;UACA,KAAKD,YAAL,GAAoB,KAApB;UAEA,KAAKiB,iBAAL,CAAuBD,KAAvB,EAA8B,KAAKF,cAAL,CAAoBhB,IAApB,CAAyBiB,EAAvD;UAEA,KAAKG,OAAL,CAAaC,OAAb,CAAsB,4BAAtB;QAEJ,CAZA,CAYE,OAAOd,KAAP,EAAc;UACZC,OAAO,CAACD,KAAR,CAAc,0BAAd,EAA0CA,KAAK,CAACE,OAAhD;UACA,KAAKW,OAAL,CAAab,KAAb,CAAoB,GAAEA,KAAK,CAACE,OAAQ,EAApC,EAFY,CAGZ;QACJ;MACF,CAnBE,MAmBK;QAEL,KAAKL,WAAL,GAAmB,IAAnB;QACA;MAEF;IACD,CArCI;;IAsCL,MAAMkB,gBAAN,GAAyB;MACrB,IAAI;QACA;QACA,MAAMC,QAAO,GAAI,IAAIC,QAAJ,EAAjB;QACAD,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,KAAKC,IAAL,CAAU5B,IAAlC;QACAyB,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyB,KAAKC,IAAL,CAAUC,KAAnC;QACAJ,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4B,UAA5B,EALA,CAKyC;QAEzC;;QACA,MAAMC,IAAG,GAAI,MAAM/B,WAAW,CAAC2B,gBAAZ,CAA6BC,QAA7B,CAAnB,CARA,CAUA;;QACA,MAAM,KAAKK,MAAL,CAAYC,QAAZ,CAAqB,qBAArB,EAA4CH,IAA5C,CAAN,CAXA,CAaA;;QACA,KAAKA,IAAL,GAAY,EAAZ,CAdA,CAgBA;;QACA,KAAKtB,WAAL,GAAmB,KAAnB;QAEA,KAAKgB,OAAL,CAAaC,OAAb,CAAsB,0BAAtB;MAEJ,CArBA,CAqBE,OAAOd,KAAP,EAAc;QACZC,OAAO,CAACD,KAAR,CAAc,iCAAd,EAAiDA,KAAK,CAACE,OAAvD;QACA,KAAKW,OAAL,CAAab,KAAb,CAAoB,GAAEA,KAAK,CAACE,OAAQ,EAApC;MAEJ;IACH,CAjEI;;IAoEL,MAAMU,iBAAN,CAAwBD,KAAxB,EAA+BY,MAA/B,EAAuC;MACnC,IAAI;QACA;QACD,MAAMH,KAAI,GAAI,MAAMhC,WAAW,CAACwB,iBAAZ,CAA8BD,KAA9B,EAAqCY,MAArC,CAApB;QAEA,KAAKV,OAAL,CAAaC,OAAb,CAAsB,GAAEM,KAAK,CAAClB,OAAQ,EAAtC;MAGH,CAPA,CAOE,OAAOF,KAAP,EAAc;QACZ,KAAKa,OAAL,CAAab,KAAb,CAAoB,GAAEA,KAAK,CAACE,OAAQ,EAApC,EADY,CAEZ;MACJ;IACH;;EAhFI;AA5BI,CAAf","names":["UserModal","ProductCard","CheckoutProduct","CheckoutService","CatalogService","UserService","mapActions","mapGetters","name","components","data","products","showCheckout","cart","isModalOpen","created","getProducts","error","console","message","computed","methods","checkout","log","closeModal","placeOrder","getUserDetails","id","order","emailOrderDetails","$toastr","success","storeUserDetails","formData","FormData","append","user","email","$store","dispatch","userId"],"sourceRoot":"","sources":["/app/src/products/ProductList.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n    <!-- Iterate through the list of products and display ProductCard for each -->\n    <ProductCard\n        v-for=\"product in products\"\n        :key=\"product.id\"\n        :pid=\"product.id\"\n        :name=\"product.name\"\n        :description=\"product.description\"\n        :price=\"product.price\"\n        @checkout=\"checkout\"\n    />\n\n    <UserModal\n        :isModalOpen=\"isModalOpen\"\n        @storeUserDetails=\"storeUserDetails\"\n        @closeModal=\"closeModal\"\n        :name=\"user.name\"\n        :email=\"user.email\"\n    />\n\n    <CheckoutProduct v-if=\"showCheckout\" :cart=\"cart\" />\n    <button v-if=\"cart.length\" @click=\"placeOrder\" class=\"place-order-button\">\n      Place Order\n    </button>\n    </div>\n  </template>\n  \n  <script>\n  import UserModal from '@/components/UserModal.vue';\n  import ProductCard from '@/components/ProductCard.vue';\n  import CheckoutProduct from './CheckoutProduct.vue';\n  import CheckoutService from '@/services/CheckoutService';\n  import CatalogService from '@/services/CatalogService';\n  import UserService from '@/services/UserService';\n  import { mapActions, mapGetters } from 'vuex';\n\n  export default {\n    name: 'ProductList',\n    components: {\n      ProductCard,\n      CheckoutProduct,\n      UserModal\n    },\n    data() {\n      return {\n        products: [],\n        showCheckout: false,\n        cart: [],\n        isModalOpen: false,\n      };\n    },\n    async created() {\n    try {\n      // Fetch products from the CatalogService\n      this.products = await CatalogService.getProducts();\n\n    } catch (error) {\n      console.error(`${error.message}`);\n      // Handle error as needed\n    }\n  },\n  computed: {\n    ...mapGetters('user', ['getUserDetails']),\n  },\n    methods: {\n        ...mapActions('user',['setUserDetails', 'clearUserDetails']),\n        checkout(cart) {\n            console.log(\"Checkout\", cart);\n            this.cart = [...this.cart, ...cart]; // Merge current cart items with existing cart\n            this.showCheckout = true;\n        },\n        closeModal() {\n            this.isModalOpen = false;\n        },\n        async placeOrder() {\n\n            if(this.getUserDetails.data.id) {\n               \n            try {\n                // Call the CheckoutService to place the order\n                const order = await CheckoutService.placeOrder(this.cart, this.getUserDetails.data.id);\n\n                // Clear the cart after placing the order\n                this.cart = [];\n                this.showCheckout = false;\n\n                this.emailOrderDetails(order, this.getUserDetails.data.id);\n\n                this.$toastr.success(`Order placed successfully!`);\n\n            } catch (error) {\n                console.error('Error placing the order:', error.message);\n                this.$toastr.error(`${error.message}`);\n                // Handle error as needed\n            }\n          } else {\n\n            this.isModalOpen = true;\n            return;\n\n          }\n        },\n        async storeUserDetails() {\n            try {\n                // Create FormData\n                const formData = new FormData();\n                formData.append('name', this.user.name);\n                formData.append('email', this.user.email);\n                formData.append('password', 'password'); // temporary\n\n                // Call the storeUserDetails to store the user details\n                const user = await UserService.storeUserDetails(formData);\n\n                // Dispatch the setUserDetails action to save user details in Vuex\n                await this.$store.dispatch('user/setUserDetails', user);\n\n                // Clear the user after storing\n                this.user = {};\n\n                // Close the modal\n                this.isModalOpen = false;\n\n                this.$toastr.success(`User store successfully!`);\n\n            } catch (error) {\n                console.error('Error storing the user details:', error.message);\n                this.$toastr.error(`${error.message}`);\n\n            }\n        },\n\n\n        async emailOrderDetails(order, userId) {\n            try {\n                // Call the storeUserDetails to store the user details\n               const email = await UserService.emailOrderDetails(order, userId);\n\n               this.$toastr.success(`${email.message}`);\n\n\n            } catch (error) {\n                this.$toastr.error(`${error.message}`);\n                // Handle error as needed\n            }\n        },\n    }\n  };\n  </script>\n\n<style scoped>\n.container {\n  padding: 20px;\n  display: flex; /* Display children in a row */\n  gap: 20px; /* Add spacing between products */\n  overflow-x: auto; /* Add horizontal scroll if needed */\n  justify-content: flex-start;\n}\n\n.place-order-button {\n  margin-top: 20px;\n  padding: 10px;\n  background-color: #dc3545;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  height: 466px;\n}\n\n.place-order-button:hover {\n  background-color: #c82333;\n}\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background-color: #fff;\n  padding: 50px;\n  border-radius: 8px;\n}\nlabel,input {\n    padding: 8px;\n}\n.submit-button {\n    padding: 8px;\n    cursor: pointer;\n}\n.close-modal {\n    padding: 8px;\n    margin-top: 30px;\n}\n</style>\n  "]},"metadata":{},"sourceType":"module"}